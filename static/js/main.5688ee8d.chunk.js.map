{"version":3,"sources":["components/ErrorValidacion.js","components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["ErrorValidacion","className","Formulario","guardarCitas","citas","cita","actualizarCita","modoEditar","setModoEditar","useState","error","setError","actualizarState","e","target","name","value","mascota","propietario","fecha","hora","sintomas","onSubmit","preventDefault","trim","some","el","citasCopia","indexCita","findIndex","id","Object","assign","uuidv4","type","placeholder","onChange","Cita","eliminarCita","editarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","useEffect","setItem","stringify","citasActualizada","filter","citaAEditar","find","console","log","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5688ee8d.chunk.js","sourcesContent":["const ErrorValidacion = () => {\r\n    return (\r\n        <p className=\"alerta-error\">¡Todos los campos son Obligatorios!</p>\r\n    )\r\n};\r\n\r\nexport default ErrorValidacion;","import {Fragment, useState} from 'react';\r\nimport ErrorValidacion from './ErrorValidacion';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nconst Formulario = ({guardarCitas, citas, cita, actualizarCita, modoEditar, setModoEditar}) => {\r\n\r\n    //Crear State de Citas\r\n    \r\n\r\n    // State para error de Formulario\r\n    const [error, setError] = useState(false) \r\n\r\n    //Lee los datos del formulario \r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n \r\n\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n        if(!modoEditar) {\r\n            \r\n            //Validar Form\r\n                if([mascota.trim(),propietario.trim(),fecha.trim(),hora.trim(), sintomas.trim()].some( el => el === \"\")) {\r\n                    setError(true);\r\n                    return;\r\n                } else {\r\n                    setError(false)\r\n                }\r\n            //Asignar un ID\r\n                const id = uuidv4()\r\n                cita.id = id\r\n                // actualizarCita({...cita, id : uuidv4()} )\r\n            //Crear la cita\r\n                guardarCitas([...citas, cita])\r\n            //Reiniciar el form\r\n            actualizarCita({\r\n                mascota : \"\",\r\n                propietario: \"\",\r\n                fecha: \"\",\r\n                hora: \"\",\r\n                sintomas: \"\"\r\n            })\r\n        } else {\r\n            if([mascota.trim(),propietario.trim(),fecha.trim(),hora.trim(), sintomas.trim()].some( el => el === \"\")) {\r\n                setError(true);\r\n                return;\r\n            } else {\r\n                setError(false)\r\n            }\r\n            \r\n            const citasCopia = citas\r\n            const indexCita = citas.findIndex( el => el.id === cita.id) \r\n            \r\n            Object.assign(citasCopia[indexCita], cita)\r\n            guardarCitas([...citasCopia])\r\n            \r\n            actualizarCita({\r\n                mascota : \"\",\r\n                propietario: \"\",\r\n                fecha: \"\",\r\n                hora: \"\",\r\n                sintomas: \"\"\r\n            })\r\n            setModoEditar(false)\r\n        }\r\n    }\r\n\r\n    // const guardarCambios = () => {\r\n    //     console.log('Guardando cambios')\r\n    // }\r\n\r\n    return ( \r\n        <Fragment >\r\n            <h2>Crear Cita</h2>\r\n            {error ? <ErrorValidacion /> : null}\r\n\r\n            <form\r\n                onSubmit={submitCita} \r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de la Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"\r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"\r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n\r\n                <label>Síntomas</label>\r\n                <textarea \r\n                    name=\"sintomas\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                ></textarea>\r\n                \r\n                {!modoEditar \r\n                \r\n                    ?\r\n                \r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Agregar cita\r\n                </button> \r\n                \r\n                    :\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >Guardar Cambios\r\n                </button>\r\n                \r\n                }\r\n\r\n                \r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Formulario;","const Cita = ({cita, eliminarCita, editarCita}) => {\r\n    const {mascota, propietario, fecha, hora, sintomas} = cita;\r\n    return ( \r\n        <div className=\"cita\">\r\n            <p>Mascota: {mascota} </p>\r\n            <p>Dueño: {propietario} </p>\r\n            <p>Fecha: {fecha} </p>\r\n            <p>Hora: {hora} </p>\r\n            <p>Síntomas: {sintomas} </p>\r\n            <div className=\"row\">\r\n            <button \r\n                className=\"button eliminar one-half column\"\r\n                onClick={() => eliminarCita(cita.id)}\r\n            >Eliminar &times;\r\n            </button>\r\n            <button\r\n                className=\"button  editar one-half column\"\r\n                onClick={() => editarCita(cita.id)}\r\n            >\r\n                Editar\r\n                \r\n            </button>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Cita;","import {Fragment, useState, useEffect} from 'react'\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  // Citas en el local Storage\n\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n  if(!citasIniciales) {\n    citasIniciales = []\n  };\n\n  // Guarda las citas que se van creando desde el Formulario\n  const [citas, guardarCitas] = useState(citasIniciales)\n\n  const [cita, actualizarCita] = useState({\n    mascota : \"\",\n    propietario: \"\",\n    fecha: \"\",\n    hora: \"\",\n    sintomas: \"\"\n  })\n  \n  const [modoEditar, setModoEditar] = useState(false)\n\n  // Funcion que eliminas cita de citas por su id\n\n    useEffect( () => {\n      \n        localStorage.setItem('citas', JSON.stringify(citas))\n      \n    }, [citas]);\n\n  const eliminarCita = (id) => {\n    const citasActualizada = citas.filter( cita => cita.id !== id);\n    guardarCitas(citasActualizada);\n  }\n\n  // Carga la informacion de la cita a Editar\n  const editarCita = id => {\n    setModoEditar(true)\n    // const citaAEditar = citas.filter( cita => cita.id === id)\n    // console.log(citaAEditar)\n    const citaAEditar = citas.find(cita => cita.id === id );\n    actualizarCita(citaAEditar)\n    console.log(cita)\n\n}\n  \n  const titulo = citas.length > 0 ? \"Administra tus Citas\" : \"No hay citas\"\n\n  return (\n    <Fragment>\n\n      <h1>Administrador de Pacientes</h1>\n      <div className=\"container\">\n        <div className=\"one-half column\">\n          <Formulario\n            citas={citas}\n            guardarCitas={guardarCitas}\n            cita={cita}\n            actualizarCita={actualizarCita}\n            modoEditar={modoEditar}\n            setModoEditar={setModoEditar}\n            />\n        </div>\n        <div className=\"one-half column\">\n          <h2>{titulo}</h2>\n          {citas.map( cita => (\n            <Cita\n            key={cita.id}\n            cita={cita} \n            eliminarCita={eliminarCita}\n            editarCita={editarCita}\n            modoEditar={modoEditar}\n            setModoEditar={setModoEditar}\n            />\n\n          )) }\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}